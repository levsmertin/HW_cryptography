МИНИСТЕРСТВО ОБРАЗОВАНИЯ И НАУКИ РОССИЙСКОЙ ФЕДЕРАЦИИ
ФГБОУ ВО «Пермский государственный национальный исследовательский университет»

Физический факультет

Кафедра радиоэлектроники и защиты информации






РАСШИРЕНИЕ SNMP-АГЕНТА ДЛЯ ДОСТУПА К БАЗАМ ДАННЫХ SQL

Курсовая работа





	Работу выполнил
студент 3 курса  специальности 
“Информационная безопасность автоматизированных систем”
_________________ В. А. Бахтин

Оценка работы научным руководителем

___________________________
(оценка, выставленная руководителем)
___________________________
(дата, подпись руководителя)
	Научный руководитель
старший преподаватель кафедры радиоэлектроники и защиты информации:
_________________ В. И. Моисеев

Оценка работы комиссией по защите курсовых работ
___________________________
(оценка, выставленная комиссией)
___________________________
(дата, подпись председателя комиссии)
	




Пермь, 2017
Оглавление
1. ВВЕДЕНИЕ	3
2. ОБЗОР ГОТОВЫХ РЕШЕНИЙ	4
3. ПРОТОКОЛЫ УПРАВЛЕНИЯ СЕТЕВЫМ ОБОРУДОВАНИЕМ	5
3.1. КОМАНДНАЯ СТРОКА (SERIAL)	5
3.2. ПРОТОКОЛ TELNET	5
3.3. ПРОТОКОЛ SSH	6
3.4. ПРОТОКОЛ SNMP	6
4. ПОДРОБНЕЕ О SNMP	7
4.1. MIB	7
4.2. OID	7
4.3. КОМАНДЫ ПРОТОКОЛА SNMP	8
5. ПОДГОТОВКА К РАЗРАБОТКЕ СКРИПТА	10
5.1. ОПЕРАЦИОННАЯ СИСТЕМА	10
5.2. ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ДЛЯ ПРОТОКОЛА SNMP	10
5.3. ЯЗЫК ПРОГРАММИРОВАНИЯ	10
6. ХОД РАЗРАБОТИКИ СКРИПТА	12
6.1. НАСТРОЙКА SNMPD.CONF	12
6.2. НАПИСАНИЕ СКРИПТА	13
6.3. ПРЕИМУЩЕСТВА РАЗРАБОТАННОГО СКРИПТА	15
7. ТЕСТИРОВНИЕ	16
8. ЗАКЛЮЧЕНИЕ	18
9. СПИСОК ИСПОЛЬЗОВАННОЙ ЛИТЕРАТУРЫ	19
10. ПРИЛОЖЕНИЕ	20



1. ВВЕДЕНИЕ
В современном мире, где количество устройств, зависящих от подключения к интернету, растет с каждым днем, появляется необходимость строгого контроля за всеми сетевыми устройствами, чтобы обеспечить их правильную работоспособность. 
Для того, чтобы сетевой администратор успешно справлялся со своей работой, ему необходимо знать состояние каждого элемента сети и иметь возможность изменить параметры функционирования каждого из них.
Но рост сложности сетей влечет за собой и сложность средств для управления сетью и ее мониторинга. Функции управления и мониторинга заключают в себе задачи по информации о состоянии сети и в дальнейшем её передачи нужным лицам для принятия необходимых мер.
Именно для того, чтобы справляться с подобными задачами и был разработан протокол SNMP (Simple Network Management Protocol), речь о котором пойдет в этой работе.
Цель моей работы::
Разработать расширение SNMP-агента, которое позволит забирать данные с sql-сервера через протокол SNMP.
Задачи:
Написать скрипт, который позволит забирать данные с sql-сервера через протокол snmp на локальном сервере.
Реализовать гибкую настройку этого скрипта через файл конфигурации.
Протестировать скрипт на реальном sql-сервере.

2. ОБЗОР ГОТОВЫХ РЕШЕНИЙ

Системы мониторинга сети отслеживают состояние активного оборудования и уведомляют об отклонении от нормальных показателей системного администратора.
Функционал современных систем мониторинга позволяет отслеживать состояние таких параметров, как загрузка CPU, статус интерфейсов, объем свободного места и т.д. 
Большинство систем мониторинга позволяют выполнять проверку устройств в автоматическом режиме по протоколу SNMP и проводить диагностику с помощью плагинов, которые можно установить или написать вручную.
Каждому параметру устройства соответствует уникальный идентификатор OID. Имея нужный идентификатор, можно получить информацию об интересующем параметре по протоколу SNMP и в случае отклонения параметра от нормального значения оповестить системного администратора.
Но бывает так, что данные, которые необходимо отслеживать, находятся в базе данных SQL, которая динамически заполняется и обновляется. А стандартные системы мониторинга сети не позволяют получать информацию из баз данных через протокол SNMP.
Поэтому было принято решение написать расширение к SNMP-агенту, которое сможет обеспечить доступ к базам данных SQL.
3. ПРОТОКОЛЫ УПРАВЛЕНИЯ СЕТЕВЫМ ОБОРУДОВАНИЕМ

На сегодняшний день существует несколько способов управлять сетевыми устройствами:
Командная строка (Serial)
Протокол Telnet
Протокол SSH
Протокол SNMP

Рассмотрим каждый из них подробнее.

3.1. КОМАНДНАЯ СТРОКА (SERIAL)

Подключение и настройку некоторых видов сетевого оборудования (коммутаторы и маршрутизаторы фирмы Cisco Systems) можно выполнить из командной строки. Для этого необходим специальный консольный кабель. Для связи настраиваемого оборудования с компьютером один конец кабеля необходимо подключить в консольный порт сетевого оборудования, а другой конец кабеля подключается к COM порту компьютера.
Когда устройство подключено физически, к нему можно подключиться с помощью специального программного обеспечения и производить его настройку. В качестве такого программного обеспечения рекомендуется использовать Putty.
Минусы такого способа: 
Необходимо наличие консольного кабеля 
Настраиваемое сетевое оборудование должно находиться в буквальном смысле «под рукой». Либо приносить устройство к компьютеру, либо наоборот.


3.2. ПРОТОКОЛ TELNET

Telnet – это сетевой, использующийся для удаленного управления сетевым оборудованием через командную строку. Это один из самых старых протоколов сети Интернет. Telnet использует протокол TCP и порт 23. Соединиться с устройством можно при помощи специального программного обеспечения -терминальной программы. Одной из самых распространенных опять является Putty. 
Основная задача протокола Telnet заключается в предоставлении возможности общения терминальным устройствам и процессам друг с другом.
Минусы такого способа: 
При доступе к удаленному устройству общение идет по незашифрованному каналу связи. Злоумышленник может перехватить логин и пароль, которые передаются в незашифрованном виде.

3.3. ПРОТОКОЛ SSH

SSH — сетевой протокол прикладного уровня, по функциональности он похож на протокол Telnet, также позволяет производить удалённое управление сетевыми устройствами. В отличие от Telnet, шифрует трафик, включая и передаваемые пароли. SSH позволяет выбирать различные алгоритмы шифрования.
Минусы такого способа: 
Не каждое сетевое устройство умеет передавать данные по протоколу SSH. При большом количестве устройств разных производителей управление сетью сильно усложняется.

3.4. ПРОТОКОЛ SNMP

 В наше время сеть обычно состоит из устройств различных производителей, и администрировать её было бы нелегкой задачей, если бы каждое сетевое устройство понимало только свою систему команд.
Поэтому встала задача создать единый язык управления сетевыми ресурсами, который понимали бы все устройства независимо от их производителей.
Так появился протокол прикладного уровня SNMP - Simple Network Management Protocol. Он разрабатывался для систем, ориентированных под операционную систему UNIX, и фактически стал стандартом для систем управления сетью и поддерживается подавляющим большинством производителей сетевого оборудования.
Название протокола - «Простой протокол сетевого управления», и, следовательно, главной задачей при его разработке было добиться максимальной простоты его внедрения и использования. В итоге получился протокол, который включает минимальный набор команд, но позволяет без проблем выполнять практически любую задачу администрирования сетевых устройств.

4. ПОДРОБНЕЕ О SNMP

Описание любого сетевого устройства в рамках протокола SNMP осуществляется посредством переменных, которые с помощью управляющих приложений могут запрашиваться, а в некоторых случаях и задаваться.
Применение SNMP:
Получение информации о состоянии сетевого оборудования
Локализация неполадок в сети
Удаленное управление узлами сети
Сбор статистической информации о состоянии сети
Главными достоинствами протокола SNMP является его простота, доступность и независимость от производителей.
4.1. MIB

Главной особенностью протокола является то, что всю необходимую для управления устройством информацию можно разместить непосредственно на самом устройстве, будь то модем, сервер, сетевая плата или маршрутизатор. Эта информация называется Административной Информационной Базой - MIB.
MIB – это важнейший и ключевой элемент протокола SNMP. Она предназначается для описания структуры данных, обмен которыми осуществляется в процессе управления устройствами.
MIB является набором переменных, которые характеризуют состояние объекта управления. В этих переменных могут храниться такие параметры, как время функционирования устройства, количество пакетов, обработанных устройством, состояние интерфейсов, и т.п.
Для контроля работы некоторого устройства сети, требуется просто получить доступ к его MIB. MIB постоянно обновляется самим устройством, таким образом можно получить сведения о нем и проанализировать значения некоторых переменных.
4.2. OID

Информация, содержащаяся в MIB может описывать неограниченное количество объектов. OID – это уникальный идентификатор, который имеет каждый объект. Иначе говоря, OID - это последовательность чисел, которые идентифицируют объект. Каждый объект во вселенной SNMP имеет свой уникальный OID. 
Управляемые объекты OID организованы в древовидную иерархию. Возьмем в пример поддерево, которым начитается каждый OID, - iso(1).org(3).dod(6).internet(1), которое в форме OID представляется как 1.3.6.1 или iso.org.dod.internet. У каждого объекта есть свой цифровой идентификатор OID и соответствующее ему текстовое имя. Внутри агента используется обозначение в виде чисел, разделенных точками, а текстовое имя, как и доменное имя, соответствующее IP- адресу, освобождает людей от необходимости запоминать длинные, сложные строки чисел.
Рисунок 1

4.3. КОМАНДЫ ПРОТОКОЛА SNMP

GetRequest
Отправка запроса от программы-менеджера к приложению-агенту для получения того или иного значения по переменной.

SetRequest
Отправка запроса от программы-менеджера к объекту для изменения переменной или списка переменных. 



GetNextRequest
Отправка запроса от программы-менеджера к приложению агенту для обнаружения на устройстве всех доступных переменных и их значений.



GetBulkRequest
Улучшенная версия GetNextRequest. Запрос от менеджера к объекту для многочисленных итераций GetNextRequest. 

Response
Осуществляет процедуру возврата связанных переменных и значений от агента менеджеру для GetRequest, SetRequest, GetNextRequest, GetBulkRequest и InformRequest. 

Trap
Осуществлении передачи сообщений от приложения-агента без предварительного запроса со стороны программы-менеджера.

InformRequest
Подтверждает факт успешной передачи или ошибки команды от одного устройства к другому.

5. ПОДГОТОВКА К РАЗРАБОТКЕ СКРИПТА

5.1. ОПЕРАЦИОННАЯ СИСТЕМА

В качестве операционной системы для разработки и тестирования скрипта была выбрана Linux Ubuntu 16.04, ввиду её доступности и простому процессу установки любых приложений, библиотек и модулей. Кроме этого, большинство серверов используют ОС Linux, поэтому администраторам будет легче внедрить расширение на свой сервер.
5.2. ПРОГРАММНОЕ ОБЕСПЕЧЕНИЕ ДЛЯ ПРОТОКОЛА SNMP

Программным обеспечением для развёртывания и использования протокола SNMP было выбрано Net-SNMP. Данный набор программного обеспечения очень широко распространён и включен во многие операционные системы, такие как Linux, FreeBSD, OpenBSD, Solaris и Mac OS X. Кроме того, его можно легко скачать, и он является бесплатным.
Основные команды Net-SNMP, использующиеся в работе:
snmpget - взаимодействует с сетью, используя SNMP GET запросы.
snmpwalk - получает поддерево управления значений с помощью SNMP GetNext запросов.
Пример запроса SNMP:
snmpget -v2c -c test snmpbot.psu.ru .1.3.6.1.4.1.50141.1.255.1.1.2.2.2
-v2c – версия протокола SNMP.
-с test – пароль.
test snmpbot.psu.ru – хост, на который идет обращение.
.1.3.6.1.4.1.50141.1.255.1.1.2.2.2 - OID
Установка Net-SNMP на Ubuntu:
apt-get install snmp snmpd
5.3. ЯЗЫК ПРОГРАММИРОВАНИЯ

После того, как выбрана операционная система и ПО для SNMP, можно приступать к разработке кода. Но необходимо определиться, какой язык программирования использовать? Здесь все зависит от предпочтений конкретного программиста. В предлагаемой мной работе использовался Python. Основными критериями при выборе языка программирования были:
Возможность принимать аргументы из командной строки
Возможность выводить аргументы в командную строку
Возможность работы с базами данных SQL
Возможность использовать регулярные выражения
 Python идеально подходит всем этим критериям. Кроме того, он обладает простым и понятным интерфейсом и в целом удобен для разработок.
Чаще всего интерпретатор Python уже в входит в состав дистрибутива. Это можно проверить набрав в терминале:
python
Если в вашем дистрибутиве не оказалось python, то для установки из репозитория в Ubuntu воспользуйтесь командой:
sudo apt-get install python
Так же необходимо установить две библиотеки для Python. Это библиотека re для работы с регулярными выражениями, и библиотека MySQLdb для работы с базами данных.
Установка re на Ubuntu:
sudo apt-get install re
Установка MySQLdb на Ubuntu:
sudo apt-get install python-mysqldb

6. ХОД РАЗРАБОТИКИ СКРИПТА

6.1. НАСТРОЙКА SNMPD.CONF

Первым делом встала задача настройки протокола SNMP на виртуальной машине. Это делается через конфигурационный файл snmpd.conf, который можно найти по следующему пути: /etc/snmp/snmpd.conf.
Первое, что нам нужно сделать – это заставить наш snmp-агент принимать запросы с других ip-адресов. Для этого в главе «AGENT BEHAVIOUR» необходимо раскомментировать строчку «agentAddress udp:161,udp6:[::1]:161». Теперь к нашему SNMP-агенту можно обращаться по ip-адресу. 
Далее в главе «ACCESS CONTROL» нужно добавить строку «rocommunity test  default  -V all», где вместо слова «test» можно указать любое другое слово, которое будет использоваться как пароль. Этой командой мы разрешаем всем, кто подключается с паролем «test» забирать любые данные с нашей машины. 
И, наконец, самое главное. Нужно описать, как будет обрабатываться наш скрипт. Для этого в главе «EXTENDING THE AGENT» необходимо добавить строку: 
«pass .1.3.6.1.4.1.50141.1.255 /usr/bin/python /usr/share/snmp/snmp_py.py».
Данная строка состоит из 3х полей. 1 поле — ключевое слово «pass», оно указывает snmpd на то, что все запросы, адресованные к веткам, входящим в указанное дерево, нужно передавать внешней программе. 2 поле – это само дерево или OID контроль над которым мы передаем. Разберемся в нем поподробнее. Как уже было показано выше и на рисунке 1, 1.3.6.1 – это цифры, с которых начинается любой OID. В MIB они выглядят вот так: «iso.org.dod.internet». Так же, исходя из рисунка 1 можно увидеть дальнейшее строение этого дерева. Цифра 4 означает «private» - то есть частный OID. Далее идет цифра 1 – «enterprises» - предприятия. В данной ветке находятся все OID, принадлежащие конкретным предприятиям. На данный момент зарезервированы номера с 1 по 46000 с некоторыми промежутками. Данные номера можно зарегистрировать в агентстве IANA.  Например, OID фирмы Cisco имеет номер 9, то есть .1.3.6.1.4.1.9, а Apache Software Foundation владеет OID 1.3.6.1.4.1.18060. Для своего номера можно далее выбирать любое число. Я выбрал номер 50141, потому что этот номер пока свободен и не будет конфликтовать с никакими OID других производителей.
3 поле – это программа обработчик и расположение самого скрипта. Указываем на то, что наше расширение будет обрабатываться приложением Python.

6.2. НАПИСАНИЕ СКРИПТА

Теперь, когда наш SNMP-агент настроен, можно приступать к разработке кода. Первая задача, которую необходимо было решить, - это узнать, как устроен OID внутри. Тут возникли первые проблемы. В литературе мало написано об устройстве OID. Немного поискав, я обнаружил, что в Net-SNMP стандартно есть пример своего OID на языке shell. 
Сначала я решил, что буду писать свой скрипт на языке shell. Но тут я столкнулся с еще одной проблемой, которая окончательно дала мне представление о том, как же устроен OID в SNMP. Дело в том, что OID должен выводить в консоль ровно 3 строки. В этом и есть проблема. В языке shell вывод в консоль производится командой «echo», а так как мне необходимо было использовать еще и SQL запросы в своем скрипте, чтобы доставать информацию с баз данных, то мне нужно было использовать команду «echo» каждый раз, когда я хочу выполнить SQL запрос. Это приводило к тому, что мой скрипт переставал работать по протоколу SNMP, и я окончательно решил использовать другой язык программирования. И это был Python.
Сейчас давайте разберемся как же устроен SNMP запрос. SNMP передает программе 2 параметра. Первый может быть «-s», «-g» или «-n». Параметр «-s» означает, что идет команда SetRequest, данный тип запрос не использовался в работе. Параметр    «-g» говорит о том, что необходимо выполнить GetRequest для следующего вторым параметром OID. А параметр «-n» сообщает, что необходимо выполнить GetNexRequest для всей ветки возможных OID, который мы передаем во втором параметре.
Как уже говорилось ранее, SNMP запрос должен возвращать ровно три строки. Первая – опрашиваемый OID. Вторая – тип возвращаемого значения. Третья – результат. 
Теперь поговорим о конфигурационном файле для скрипта. Так как задача была разработать «гибкий» скрипт, необходимо было предусмотреть его настройку через файл конфигурации.  Файл может содержать следующие поля, где n – любое целое число большее или равное нулю: 
DATABASE[n] = database_name – имя базы данных.
DBHOST[n] = www.host.ru – адрес базы данных.
DBUSER[n] = user_name – имя пользователя базы данных.
DBPASS[n] = user_password – пароль пользователя.
TABLE[n] = table_name – имя таблицы.
COLUMN[n] = column_name – имя столбца.
QUERY[n] = query – часть запроса
Данных полей может быть несколько. Именно в этом файле нужно указать, к каким базам данных, таблицам и столбцам мы хотим обращаться по SNMP.
Структура OID в моем скрипте:
OID = <CUSTOM_OID>.<DATABASE>.<QUERY>.<TABLE>.<COLUMN>.<VALUE>
Давайте рассмотрим блок-схему скрипта.

После получения аргументов от SNMP-агента, с помощью регулярных выражений из файла конфигурации выбираются соответствующие поля для. Идет подключение к базе данных с помощью полей: DATABASE, DBHOST, DBUSER, DBPASS, и выбираются таблицы и столбцы. Далее, проверяется был у нас snmpget запрос или snmpwalk. В первом случае идет подстановка данных в запрос. Структура запроса: SELECT <query> FROM <table> WHERE <column> = <value>. Затем запрос выполняется и в соответствии со стандартом SNMP выводит результат.

6.3. ПРЕИМУЩЕСТВА РАЗРАБОТАННОГО СКРИПТА

Лёгкая установка. Для работы расширения не требуется никаких сторонних программ. Нужно только разместить скрипт на сервере. 
Лёгкая настройка. Для настройки требуется лишь написать несколько значений в конфигурационный файл.
Универсальность. Скрипт дает возможность проводить мониторинг неограниченного количества баз данных и таблиц в них.

7. ТЕСТИРОВНИЕ

При тестировании использовалась виртуальная машина с операционной системой Linux Debian, находящаяся на сервере университета. В качестве базы данных использовалась база данных billing.psu.ru.
Конфигурационный файл я заполнил следующим образом

Выполним запрос к базе данных:
SELECT count(*) FROM applications WHERE status_id = 2.
Соответствуюший этому запросу OID: .1.3.6.1.4.1.50141.1.255.1.1.2.2.2
Запрос SNMP-агенту: 
snmpget -v2c -c test snmpbot.psu.ru .1.3.6.1.4.1.50141.1.255.1.1.2.2.2
Результат:

2)	Для того, чтобы выполнить подобный запрос для всех имеющихся в таблице
status_id, нужно убрать из OID последнюю цифру и выполнить snmpwalk запрос.
Запрос SNMP-агенту: 
snmpwalk -v2c -c test snmpbot.psu.ru .1.3.6.1.4.1.50141.1.255.1.1.2.2
Результат:
 
3)	Возьмем распиновку по тарифам из таблицы sessions_view.
Запрос SNMP-агенту: 
snmpwalk -v2c -c test snmpbot.psu.ru .1.3.6.1.4.1.50141.1.255.1.1.3.3
Результат:

4)  Выведем количество подключений за последние 1, 5 и 10 минут.
Запрос SNMP-агенту: 
snmpget -v2c -c test snmpbot.psu.ru .1.3.6.1.4.1.50141.1.255.1.1.3.1.1
Результат:

Запрос SNMP-агенту: 
snmpget -v2c -c test snmpbot.psu.ru .1.3.6.1.4.1.50141.1.255.1.1.3.1.5
Результат:

Запрос SNMP-агенту: 
snmpget -v2c -c test snmpbot.psu.ru .1.3.6.1.4.1.50141.1.255.1.1.3.1.10
Результат:


8. ЗАКЛЮЧЕНИЕ

SNMP – удобный, универсальный протокол общения между сетевыми устройствами. Такие особенности, как его простота, независимость от производителя устройства и доступность смогли сделать его одним из самых используемых и распространённых протоколов управления сетевым оборудованием. Возможность расширения SNMP-агента, создания собственных OID также способствуют развитию интереса среди сетевых администраторов.
Целью данной работы была разработка скрипта, который поможет забирать данный с баз данных SQL.  Поставленная цель достигнута, и, на основании проведенной работы, можно сделать вывод, что SNMP, очевидно, в числе важнейших, и во многих случаях не имеющих альтернативы протоколов. И это несмотря на его простоту, которая, однако, стала результатом многолетних разработок и согласований сетевых стандартов при участии ведущих производителей оборудования.

9. СПИСОК ИСПОЛЬЗОВАННОЙ ЛИТЕРАТУРЫ

1. Кевин Дж. Шмидт, Дуглас Р. Мауро. Основы SNMP, 2-е издание. 2012. 
2. В. Олифер, Н. Олифер. Компьютерные сети: принципы, технологии, протоколы, 5 издание, 2016.
